#pragma kernel Init
#pragma kernel Draw
#pragma kernel Main
#pragma kernel DrawKernel
#pragma kernel BilinearUpscale

RWTexture2D<float4> Result;
RWTexture2D<float4> Cells;
Texture2D<float4> PreviousCells;
RWTexture2D<float4> Upscale;

Texture2D<float3> Gradient;
SamplerState samplerGradient;

float2 PointerPosition;
int Timestep;
int Width;
int Height;
int KernelSize;
int UpscaleFactor;

//orbium 0.5 0.05 0.8 0.05

#define CONV1_MU 0.5
#define CONV1_SIGMA 0.05
#define CONV2_MU 0.8
#define CONV2_SIGMA 0.05
#define CONV3_MU 0.8
#define CONV3_SIGMA 0.02

float hash12(float2 p)
{
    float3 p3  = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float conv(float x, float mu, float sigma, float multiplier = 1)
{
    return exp(-pow((x - mu) / (2 * sigma), 2)) * multiplier;
}

float kernelWeight(float value)
{
    return max(conv(value, CONV1_MU, CONV1_SIGMA), conv(value, CONV2_MU, CONV2_SIGMA));
}

float growth(float x)
{
    //0.21 0.027
    return exp(-pow((x - 0.21) / (2 * 0.027), 2)) * 2 - 1;
}

float normalizedDistance(int2 pos1, int2 pos2, float maxDistance)
{
    return 1.0 - saturate(distance(pos1, pos2) / maxDistance);
}

[numthreads(32,32,1)]
void Init(int3 id : SV_DispatchThreadID)
{
    float value = normalizedDistance(id.xy, int2(Width * 0.5, Height * 0.5), 100);
    Cells[id.xy] = float4(value, 0, 0, 1);
}

[numthreads(32,32,1)]
void Draw(int3 id : SV_DispatchThreadID)
{
    float dst = distance(id.xy, PointerPosition.xy);

    if (dst < 50 && PreviousCells[id.xy].r == 0)
    {
        Cells[id.xy] = float4(hash12(id.xy), 0, 0, 1);
    }
}

[numthreads(32,32,1)]
void Main(int3 id : SV_DispatchThreadID)
{
    float totalWeight = 0;
    float total = 0;

    const int kernelRadius = KernelSize * 0.5;
    
    for (int y = -kernelRadius; y <= kernelRadius; y++)
    {
        for (int x = -kernelRadius; x <= kernelRadius; x++)
        {
            int2 offset = id.xy + int2(x, y);
            float value = normalizedDistance(id.xy, offset, kernelRadius);
            float cellValue = PreviousCells[offset].r;
            float weight = kernelWeight(value);
            
            totalWeight += weight;
            total += cellValue * weight;
        }
    }

    total /= totalWeight;
    
    float cellValue = PreviousCells[id.xy].r;
    cellValue += growth(total) * 0.5 ;
    cellValue = clamp(cellValue, 0.0, 1.0);
    Cells[id.xy] = float4(cellValue, 0, 0, 1);
}

[numthreads(8,8,1)]
void DrawKernel(int3 id : SV_DispatchThreadID)
{
    float value = normalizedDistance(id.xy, int2(KernelSize * 0.5, KernelSize * 0.5), KernelSize * 0.5);
    float weight = kernelWeight(value);
    Result[id.xy] = float4(weight.rrr, 1);
}

[numthreads(32,32,1)]
void BilinearUpscale(uint3 id : SV_DispatchThreadID)
{
    int2 downscaledPosition = int2(floor((float)id.x / UpscaleFactor), floor((float)id.y / UpscaleFactor));
    
    float top = Cells[downscaledPosition + int2(0, 1)].r;
    float bottom = Cells[downscaledPosition + int2(0, -1)].r;
    float left = Cells[downscaledPosition + int2(-1, 0)].r;
    float right = Cells[downscaledPosition + int2(1, 0)].r;

    float avg = (top + bottom + left + right) * 0.25;

    float3 gradientColor = Gradient.SampleLevel(samplerGradient, float2(avg, 0), 0).rgb;
    Upscale[id.xy] = float4(gradientColor, 1);
}